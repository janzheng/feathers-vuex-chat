{"remainingRequest":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/babel-loader/lib/index.js!/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/feathers-vuex/dist/service-module/global-models.js","dependencies":[{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/feathers-vuex/dist/service-module/global-models.js","mtime":1576553531990},{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/cache-loader/dist/cjs.js","mtime":1576617922850},{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/babel-loader/lib/index.js","mtime":1572970632149}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n\n/**\n * A global object that holds references to all Model Classes in the application.\n */\nexport var globalModels = {};\n/**\n * prepareAddModel wraps options in a closure around addModel\n * @param options\n */\n\nexport function prepareAddModel(options) {\n  var serverAlias = options.serverAlias;\n  return function addModel(Model) {\n    globalModels[serverAlias] = globalModels[serverAlias] || {\n      byServicePath: {}\n    };\n    var name = Model.modelName || Model.name;\n\n    if (globalModels[serverAlias][name] && options.debug) {\n      // eslint-disable-next-line no-console\n      console.error(\"Overwriting Model: models[\".concat(serverAlias, \"][\").concat(name, \"].\"));\n    }\n\n    globalModels[serverAlias][name] = Model;\n    globalModels[serverAlias].byServicePath[Model.servicePath] = Model;\n  };\n}\nexport function clearModels() {\n  Object.keys(globalModels).forEach(function (key) {\n    var serverAliasObj = globalModels[key];\n    Object.keys(serverAliasObj).forEach(function (key) {\n      delete globalModels[key];\n    });\n    delete globalModels[key];\n  });\n}",{"version":3,"sources":["/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/feathers-vuex/dist/service-module/global-models.js"],"names":["globalModels","prepareAddModel","options","serverAlias","addModel","Model","byServicePath","name","modelName","debug","console","error","servicePath","clearModels","Object","keys","forEach","key","serverAliasObj"],"mappings":";;;;AAAA;;;AAGA,OAAO,IAAMA,YAAY,GAAG,EAArB;AACP;;;;;AAIA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAAA,MAC/BC,WAD+B,GACfD,OADe,CAC/BC,WAD+B;AAEvC,SAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9BL,IAAAA,YAAY,CAACG,WAAD,CAAZ,GAA4BH,YAAY,CAACG,WAAD,CAAZ,IAA6B;AACvDG,MAAAA,aAAa,EAAE;AADwC,KAAzD;AAGA,QAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,IAAmBH,KAAK,CAACE,IAAtC;;AACA,QAAIP,YAAY,CAACG,WAAD,CAAZ,CAA0BI,IAA1B,KAAmCL,OAAO,CAACO,KAA/C,EAAsD;AACpD;AACAC,MAAAA,OAAO,CAACC,KAAR,qCAA2CR,WAA3C,eAA2DI,IAA3D;AACD;;AACDP,IAAAA,YAAY,CAACG,WAAD,CAAZ,CAA0BI,IAA1B,IAAkCF,KAAlC;AACAL,IAAAA,YAAY,CAACG,WAAD,CAAZ,CAA0BG,aAA1B,CAAwCD,KAAK,CAACO,WAA9C,IAA6DP,KAA7D;AACD,GAXD;AAYD;AACD,OAAO,SAASQ,WAAT,GAAuB;AAC5BC,EAAAA,MAAM,CAACC,IAAP,CAAYf,YAAZ,EAA0BgB,OAA1B,CAAkC,UAAAC,GAAG,EAAI;AACvC,QAAMC,cAAc,GAAGlB,YAAY,CAACiB,GAAD,CAAnC;AACAH,IAAAA,MAAM,CAACC,IAAP,CAAYG,cAAZ,EAA4BF,OAA5B,CAAoC,UAAAC,GAAG,EAAI;AACzC,aAAOjB,YAAY,CAACiB,GAAD,CAAnB;AACD,KAFD;AAGA,WAAOjB,YAAY,CAACiB,GAAD,CAAnB;AACD,GAND;AAOD","sourcesContent":["/**\n * A global object that holds references to all Model Classes in the application.\n */\nexport const globalModels = {}\n/**\n * prepareAddModel wraps options in a closure around addModel\n * @param options\n */\nexport function prepareAddModel(options) {\n  const { serverAlias } = options\n  return function addModel(Model) {\n    globalModels[serverAlias] = globalModels[serverAlias] || {\n      byServicePath: {}\n    }\n    const name = Model.modelName || Model.name\n    if (globalModels[serverAlias][name] && options.debug) {\n      // eslint-disable-next-line no-console\n      console.error(`Overwriting Model: models[${serverAlias}][${name}].`)\n    }\n    globalModels[serverAlias][name] = Model\n    globalModels[serverAlias].byServicePath[Model.servicePath] = Model\n  }\n}\nexport function clearModels() {\n  Object.keys(globalModels).forEach(key => {\n    const serverAliasObj = globalModels[key]\n    Object.keys(serverAliasObj).forEach(key => {\n      delete globalModels[key]\n    })\n    delete globalModels[key]\n  })\n}\n"]}]}