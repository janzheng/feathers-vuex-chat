{"remainingRequest":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/src/views/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/src/views/Chat.vue","mtime":1576619625710},{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/cache-loader/dist/cjs.js","mtime":1576617922850},{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/babel-loader/lib/index.js","mtime":1572970632149},{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/cache-loader/dist/cjs.js","mtime":1576617922850},{"path":"/Users/janzheng/Desktop/projects/_lessons/feathersjs/feathers-chat-vuex/node_modules/vue-loader/lib/index.js","mtime":1576617923551}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n\nimport moment from 'moment'\nimport { mapState, mapGetters, mapActions } from 'vuex'\nimport feathersClient from '../feathers-client'; // from Github Feathers-Vuex docs\n\n\n// use the mapgetters instead, these just help you test better\n// async function getUsers() {\n//   let users = await feathersClient.service('users').find()\n//   return users\n// }\n\n// async function getMessages() {\n//   let messages = await feathersClient.service('messages').find()\n//   return messages\n// }\n\n\nexport default {\n  name: \"Chat\",\n\n  data: () => {\n\n    // let users = getUsers(), messages = getMessages()\n    // console.log('async users...', users)\n    // console.log('async messages...', messages)\n\n    return {\n      valid: false,\n      user: {\n        email: \"\",\n        password: \"\"\n      },\n      inputMessage: \"\", \n      notEmptyRules: [value => !!value || \"Can not be empty\"]\n    }\n  },\n  computed: {\n    ...mapState(\"auth\", { loading: \"isAuthenticatePending\" }),\n    ...mapGetters('users', { allUsers: 'find' }),\n    ...mapGetters('messages', { allMessages: 'find' }),\n\n    userCount() {\n      return this.allUsers().total\n    }, \n\n    users() {\n      return this.allUsers().data\n    }, \n\n    latestMessages() {\n      // find the latest 25 messages. they come newest first\n      return this.allMessages({\n        query: {\n          $sort: { createdAt: 1 },\n          $limit: 25\n        }\n      }).data\n    }, \n\n\n    // todos () {\n    //   return this.findTodosInStore({ query: {} }).data\n    // }\n  },\n  methods: {\n    ...mapActions('messages', { sendMessage: 'create' }), \n\n    nicedate: (date) => {\n      return moment(date).format('MMM Do, hh:mm:ss')\n    },\n\n    sendMessage() {\n      // let txt = this.inputMessage\n      // this.sendMessage({\n      //   text: \"123123\"\n      // })\n      const { Messages } = this.$FeathersVuex.api\n      // console.log('???', Message, this.$FeathersVuex.api.Messages)\n      const data = { text: this.inputMessage }\n      const message = new Messages(data)\n\n      message.create() // --> Creates the todo on the server using the instance data\n      this.inputMessage = \"\"\n    }, \n  },\n  created () {\n    console.log('created /messages',this.$FeathersVuex.api.Messages.find())\n    console.log('created /users',this.$FeathersVuex.api.User.find())\n    // this.findMessage({ query: {} })\n    //   .then(response => {\n    //     // In the find action, the 'todos' array is not a reactive list, but the individual records are.\n    //     const messages = response.data || response\n    //    console.log('created | findMessage', messages)\n    //   })\n  }\n};\n",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chat.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n\n    <v-row>\n      <v-col class=\"pl-6\" md=\"auto\">\n\n        <div>\n          <h3 class=\"mb-3\" >Total Users: {{ userCount }}</h3>\n\n          <v-card outlined class=\"mb-3\" v-for=\"user of users\" :key=\"user._id\">\n            <v-list-item>\n              <v-list-item-avatar\n                size=\"60\"\n                color=\"grey\"\n              ><img :src=\"user.avatar\"></v-list-item-avatar>\n\n              <v-list-item-content>\n                {{ user.email }}\n              </v-list-item-content>\n\n            </v-list-item>\n          </v-card>\n\n        </div>\n      </v-col>\n\n      <v-col class=\"pr-6\">\n\n        <v-card class=\"mb-3\" v-for=\"message of latestMessages\" :key=\"message._id\">\n          <v-list-item two-line>\n            <v-list-item-avatar\n              size=\"60\"\n              color=\"grey\"\n            ><img :src=\"message.user.avatar\"></v-list-item-avatar>\n            <v-list-item-content>\n              <div class=\"overline mb-4\">{{ message.user.email }} | {{ nicedate(message.createdAt) }}  </div>\n              <div>{{ message.text }} </div>\n            </v-list-item-content>\n          </v-list-item>\n        </v-card>\n\n        <v-footer fixed>\n          <v-row>\n            <v-col>\n              <v-text-field\n                v-model=\"inputMessage\"\n                label=\"Message\"\n                required\n              ></v-text-field>\n            </v-col>\n            <v-col md=\"auto\">\n              <v-btn flat @click=\"sendMessage\">Send</v-btn>\n            </v-col>\n          </v-row>\n        </v-footer>\n\n      </v-col>\n    </v-row>\n\n  </div>\n</template>\n\n\n\n<script>\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n\nimport moment from 'moment'\nimport { mapState, mapGetters, mapActions } from 'vuex'\nimport feathersClient from '../feathers-client'; // from Github Feathers-Vuex docs\n\n\n// use the mapgetters instead, these just help you test better\n// async function getUsers() {\n//   let users = await feathersClient.service('users').find()\n//   return users\n// }\n\n// async function getMessages() {\n//   let messages = await feathersClient.service('messages').find()\n//   return messages\n// }\n\n\nexport default {\n  name: \"Chat\",\n\n  data: () => {\n\n    // let users = getUsers(), messages = getMessages()\n    // console.log('async users...', users)\n    // console.log('async messages...', messages)\n\n    return {\n      valid: false,\n      user: {\n        email: \"\",\n        password: \"\"\n      },\n      inputMessage: \"\", \n      notEmptyRules: [value => !!value || \"Can not be empty\"]\n    }\n  },\n  computed: {\n    ...mapState(\"auth\", { loading: \"isAuthenticatePending\" }),\n    ...mapGetters('users', { allUsers: 'find' }),\n    ...mapGetters('messages', { allMessages: 'find' }),\n\n    userCount() {\n      return this.allUsers().total\n    }, \n\n    users() {\n      return this.allUsers().data\n    }, \n\n    latestMessages() {\n      // find the latest 25 messages. they come newest first\n      return this.allMessages({\n        query: {\n          $sort: { createdAt: 1 },\n          $limit: 25\n        }\n      }).data\n    }, \n\n\n    // todos () {\n    //   return this.findTodosInStore({ query: {} }).data\n    // }\n  },\n  methods: {\n    ...mapActions('messages', { sendMessage: 'create' }), \n\n    nicedate: (date) => {\n      return moment(date).format('MMM Do, hh:mm:ss')\n    },\n\n    sendMessage() {\n      // let txt = this.inputMessage\n      // this.sendMessage({\n      //   text: \"123123\"\n      // })\n      const { Messages } = this.$FeathersVuex.api\n      // console.log('???', Message, this.$FeathersVuex.api.Messages)\n      const data = { text: this.inputMessage }\n      const message = new Messages(data)\n\n      message.create() // --> Creates the todo on the server using the instance data\n      this.inputMessage = \"\"\n    }, \n  },\n  created () {\n    console.log('created /messages',this.$FeathersVuex.api.Messages.find())\n    console.log('created /users',this.$FeathersVuex.api.User.find())\n    // this.findMessage({ query: {} })\n    //   .then(response => {\n    //     // In the find action, the 'todos' array is not a reactive list, but the individual records are.\n    //     const messages = response.data || response\n    //    console.log('created | findMessage', messages)\n    //   })\n  }\n};\n</script>\n\n"]}]}