/*
eslint
@typescript-eslint/explicit-function-return-type: 0,
@typescript-eslint/no-explicit-any: 0
*/
import FeathersVuexFind from './FeathersVuexFind'
import FeathersVuexGet from './FeathersVuexGet'
import FeathersVuexFormWrapper from './FeathersVuexFormWrapper'
import makeFindMixin from './make-find-mixin'
import makeGetMixin from './make-get-mixin'
import { globalModels as models } from './service-module/global-models'
import { clients, addClient } from './service-module/global-clients'
import makeModel from './service-module/make-model'
import prepareMakeServicePlugin from './service-module/make-service-plugin'
import prepareMakeAuthPlugin from './auth-module/make-auth-plugin'
import { initAuth } from './utils'
import { FeathersVuex } from './vue-plugin/vue-plugin'
const defaultOptions = {
  autoRemove: false,
  addOnUpsert: false,
  enableEvents: true,
  idField: 'id',
  tempIdField: '__id',
  debug: false,
  keepCopiesInStore: false,
  nameStyle: 'short',
  paramsForServer: [],
  preferUpdate: false,
  replaceItems: false,
  serverAlias: 'api',
  skipRequestIfExists: false,
  whitelist: [] // Custom query operators that will be allowed in the find getter.
}
export default function feathersVuex(feathers, options) {
  if (!feathers || !feathers.service) {
    throw new Error(
      'The first argument to feathersVuex must be a feathers client.'
    )
  }
  options = Object.assign({}, defaultOptions, options)
  if (!options.serverAlias) {
    throw new Error(
      `You must provide a 'serverAlias' in the options to feathersVuex`
    )
  }
  addClient({ client: feathers, serverAlias: options.serverAlias })
  const BaseModel = makeModel(options)
  const makeServicePlugin = prepareMakeServicePlugin(options)
  const makeAuthPlugin = prepareMakeAuthPlugin(feathers, options)
  return {
    makeServicePlugin,
    BaseModel,
    makeAuthPlugin,
    FeathersVuex,
    models,
    clients
  }
}
export {
  initAuth,
  FeathersVuexFind,
  FeathersVuexGet,
  FeathersVuexFormWrapper,
  FeathersVuex,
  makeFindMixin,
  makeGetMixin,
  models,
  clients
}
